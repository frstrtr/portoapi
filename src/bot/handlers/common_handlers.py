# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ /start, /help


from aiogram import types
from src.core.database.db_service import get_seller, SessionLocal


def get_main_menu_keyboard(is_registered: bool = True):
    """Generate main menu keyboard based on registration status"""
    if is_registered:
        keyboard = [
            [types.KeyboardButton(text="/myaccount"), types.KeyboardButton(text="/balance")],
            [types.KeyboardButton(text="/create_invoice"), types.KeyboardButton(text="/buyers")],
            [types.KeyboardButton(text="/invoices"), types.KeyboardButton(text="/sweep")],
            [types.KeyboardButton(text="/add_buyer"), types.KeyboardButton(text="/deposit")],
            [types.KeyboardButton(text="/help")]
        ]
    else:
        keyboard = [
            [types.KeyboardButton(text="/register"), types.KeyboardButton(text="/help")]
        ]
    
    return types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )


async def handle_start(message: types.Message):
    user = message.from_user
    
    # Check if user is registered
    try:
        db = SessionLocal()
        seller = get_seller(db=db, telegram_id=user.id)
        # Check if user has any xPub configured
        from src.core.database.db_service import get_wallets_by_seller, get_buyer_groups_by_seller
        wallets = get_wallets_by_seller(db, user.id)
        buyer_groups = get_buyer_groups_by_seller(db, user.id)
        has_xpub = any(w.xpub for w in wallets) or any(g.xpub for g in buyer_groups)
        is_registered = seller is not None and has_xpub
        db.close()
    except Exception:
        is_registered = False
    
    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
    
    if is_registered:
        welcome_text += (
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
            "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
            "‚Ä¢ /myaccount - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ\n"
            "‚Ä¢ /create_invoice - —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å\n"
            "‚Ä¢ /buyers - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ /balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
            "‚Ä¢ /help - –ø–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
        )
    else:
        welcome_text += (
            "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PortoAPI!\n\n"
            "–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –≤ TRON.\n\n"
            "üìã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ xPub –∫–æ—à–µ–ª–µ–∫\n"
            "3. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏!\n\n"
            "‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
        )
    
    keyboard = get_main_menu_keyboard(is_registered=is_registered)
    await message.answer(welcome_text, reply_markup=keyboard)


async def handle_help(message: types.Message):
    # Check if user is registered for appropriate help content
    try:
        db = SessionLocal()
        seller = get_seller(db=db, telegram_id=message.from_user.id)
        from src.core.database.db_service import get_wallets_by_seller, get_buyer_groups_by_seller
        wallets = get_wallets_by_seller(db, message.from_user.id)
        buyer_groups = get_buyer_groups_by_seller(db, message.from_user.id)
        has_xpub = any(w.xpub for w in wallets) or any(g.xpub for g in buyer_groups)
        is_registered = seller is not None and has_xpub
        db.close()
    except Exception:
        is_registered = False
    
    if is_registered:
        help_text = """üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üë§ **–ê–∫–∫–∞—É–Ω—Ç:**
‚Ä¢ /myaccount - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
‚Ä¢ /balance - –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤
‚Ä¢ /deposit - –≥–∞–∑–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç

üí∞ **–ò–Ω–≤–æ–π—Å—ã:**
‚Ä¢ /create_invoice - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å
‚Ä¢ /invoices - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–≤–æ–π—Å–æ–≤
‚Ä¢ /sweep - –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤

üë• **–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏:**
‚Ä¢ /buyers - —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
‚Ä¢ /add_buyer - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è

‚õΩ **–ì–∞–∑–æ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è:**
‚Ä¢ /gasstation - —Å—Ç–∞—Ç—É—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–µ–π
‚Ä¢ /gasstation_stake - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–π–∫–∏–Ω–≥–æ–º
‚Ä¢ /gasstation_delegate - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

ü§ñ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
‚Ä¢ /keeper_status - —Å—Ç–∞—Ç—É—Å keeper bot
‚Ä¢ /keeper_logs - –ª–æ–≥–∏ keeper bot

‚ùì **–°–ø—Ä–∞–≤–∫–∞:**
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üîç **–ü–æ–Ω—è—Ç–∏—è:**
‚Ä¢ **Account** - –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –≤ HD –∫–æ—à–µ–ª—å–∫–µ (m/44'/195'/account')
‚Ä¢ **Gas Station** - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è TRON —Ä–µ—Å—É—Ä—Å–∞–º–∏
‚Ä¢ **Keeper Bot** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ **Address Index** - –Ω–æ–º–µ—Ä –∞–¥—Ä–µ—Å–∞ –≤ —Ä–∞–º–∫–∞—Ö account
‚Ä¢ **xPub** - –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤
‚Ä¢ **Buyer ID** - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"""
    else:
        help_text = """üöÄ **–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:**

1. /register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ xPub –∫–æ—à–µ–ª—å–∫–∞ (–æ—Ñ–ª–∞–π–Ω)
3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –∏–Ω–≤–æ–π—Å–æ–≤

‚ùì **–ß—Ç–æ —Ç–∞–∫–æ–µ xPub?**
–≠—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–∞–º.

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."""
    
    keyboard = get_main_menu_keyboard(is_registered=is_registered)
    await message.answer(help_text, parse_mode="Markdown", reply_markup=keyboard)
