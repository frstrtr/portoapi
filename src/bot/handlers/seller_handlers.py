from aiogram.fsm.context import FSMContext


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞

import logging
import secrets
from io import BytesIO
import html

import qrcode

from aiogram.types.input_file import BufferedInputFile

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.core.database.db_service import (
    create_seller,
    get_seller,
    get_wallet_by_group,
    create_invoice,
    get_invoices_by_seller,
    update_invoice,
    get_buyer_group,
    get_buyer_groups_by_seller,
    create_buyer_group,
    get_wallets_by_seller,
    create_seller_wallet,
    update_seller,
    get_transactions_by_invoice,
)

from src.core.crypto.xpub_validation import is_valid_xpub
from src.core.services.gas_station import (
    get_or_create_tron_deposit_address,
    calculate_trx_needed,
    prepare_for_sweep,
)

# Import new gas station module
from src.core.services.gasstation import (
    GasStationService,
    GasStationManager,
    format_resource_status,
    analyze_resource_needs,
    calculate_staking_efficiency,
)


# pylint: disable=logging-fstring-interpolation


# Import admin handlers
# admin handler will show xPubs for admin users
from src.bot.admin.admin_handlers import handle_admin_xpubs, is_admin

# Import database service functions
from src.core.database.db_service import get_wallets_by_seller

from src.core.crypto.hd_wallet_service import generate_address_from_xpub

# Import common handlers for keyboard
from src.bot.handlers.common_handlers import get_main_menu_keyboard


logger = logging.getLogger("bot.seller_handlers")


MAIN_COMMANDS = [
    "/register",
    "/myaccount",
    "/deposit",
    "/balance",
    "/create_invoice",
    "/buyers",
    "/add_buyer",
    "/sweep",
    "/invoices",
    "/gasstation",
    "/keeper_status",
]


# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
class InvoiceFSM(StatesGroup):
    amount = State()
    description = State()
    group = State()
    awaiting_group_name_for_invoice = State()


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è/–≥—Ä—É–ø–ø—ã
class AddBuyerFSM(StatesGroup):
    buyer_id = State()
    xpub = State()


# FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegisterFSM(StatesGroup):
    ask_xpub = State()
    get_xpub = State()
    get_account = State()
    choose_account_action = State()
    select_existing_account = State()
    ask_address = State()


async def handle_main_command_interrupt(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    logger.info(
        f"User {telegram_id} sent main command '{message.text}' during active FSM flow. Cancelling FSM state."
    )
    await state.clear()
    await message.answer(
        "‚ùóÔ∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤–æ –≤—Ä–µ–º—è –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
    )
    await show_main_menu(message, state)


async def handle_myaccount(message: types.Message):
    """Show detailed account information for registered users"""
    telegram_id = message.from_user.id
    db = message.bot.db

    try:
        # Get seller information
        seller = get_seller(db=db, telegram_id=telegram_id)
        if not seller:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=get_main_menu_keyboard(is_registered=False),
            )
            return

        # Get user info from Telegram
        user = message.from_user
        user_info = []
        user_info.append("üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>")
        user_info.append(f"‚Ä¢ ID: <code>{user.id}</code>")
        fn = html.escape(user.first_name) if user.first_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        user_info.append(f"‚Ä¢ –ò–º—è: {fn}")
        if user.last_name:
            user_info.append(f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {html.escape(user.last_name)}")
        if user.username:
            user_info.append(f"‚Ä¢ Username: @{html.escape(user.username)}")
        else:
            user_info.append("‚Ä¢ Username: –ù–µ —É–∫–∞–∑–∞–Ω")

        # Registration date
        if seller.date_created:
            reg_date = seller.date_created.strftime("%d.%m.%Y %H:%M")
            user_info.append(f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}")

        # Get buyer groups and xPubs
        buyer_groups = get_buyer_groups_by_seller(db, telegram_id)

        user_info.append("\nüí≥ <b>–ö–æ—à–µ–ª—å–∫–∏ (xPub):</b>")
        if buyer_groups:
            for group in buyer_groups:
                if group.xpub:
                    xpub_short = (
                        f"{group.xpub[:20]}...{group.xpub[-10:]}"

                        if len(group.xpub) > 35
                        else group.xpub
                    )
                    user_info.append(
                        f"‚Ä¢ Account {group.invoices_group}: <code>{html.escape(xpub_short)}</code>"
                    )
                    if group.buyer_id:
                        user_info.append(f"  ‚îî –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {html.escape(group.buyer_id)}")
                else:
                    user_info.append(
                        f"‚Ä¢ Account {group.invoices_group}: ‚ö†Ô∏è xPub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
                    )
        else:
            user_info.append("‚Ä¢ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")

        # Get wallets information
        wallets = get_wallets_by_seller(db, telegram_id)
        if wallets:
            user_info.append("\nüîë <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:</b>")
            for wallet in wallets:
                if wallet.xpub:
                    xpub_short = (
                        f"{wallet.xpub[:20]}...{wallet.xpub[-10:]}"

                        if len(wallet.xpub) > 35
                        else wallet.xpub
                    )
                    derivation_path = getattr(wallet, 'derivation_path', None) or "‚Äî"
                    deposit_type = getattr(wallet, 'deposit_type', None)
                    line = f"‚Ä¢ Account {wallet.account} (path: {html.escape(derivation_path)})"
                    if deposit_type:
                        line += f" [{deposit_type}]"
                    line += f": <code>{html.escape(xpub_short)}</code>"
                    user_info.append(line)
                    if wallet.label:
                        user_info.append(f"  ‚îî –ú–µ—Ç–∫–∞: {html.escape(wallet.label)}")

        # Get invoice statistics
        invoices = get_invoices_by_seller(db, telegram_id)
        total_invoices = len(invoices)
        paid_invoices = len([inv for inv in invoices if inv.status == "paid"])
        pending_invoices = len([inv for inv in invoices if inv.status == "pending"])
        partial_invoices = len([inv for inv in invoices if inv.status == "partial"])

        user_info.append("\nüìã <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–æ–π—Å–æ–≤:</b>")
        user_info.append(f"‚Ä¢ –í—Å–µ–≥–æ: {total_invoices}")
        user_info.append(f"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: {paid_invoices}")
        user_info.append(f"‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ: {partial_invoices}")
        user_info.append(f"‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_invoices}")

        # Details for partially paid invoices
        if partial_invoices:
            user_info.append("\nüü° <b>–ß–∞—Å—Ç–∏—á–Ω–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã:</b>")
            for inv in [i for i in invoices if i.status == 'partial']:
                try:
                    txs = get_transactions_by_invoice(db, inv.id)
                    total_received = sum(float(t.amount_received or 0) for t in txs)
                except Exception:
                    total_received = 0.0
                remaining = max(0.0, float(inv.amount) - total_received)
                addr_short = html.escape(inv.address[:8] + '...' + inv.address[-6:]) if inv.address and len(inv.address) > 15 else html.escape(getattr(inv, 'address', ''))
                user_info.append(
                    f"‚Ä¢ #{inv.id} {total_received:.2f}/{float(inv.amount):.2f} USDT (–æ—Å—Ç–∞–ª–æ—Å—å {remaining:.2f}) <code>{addr_short}</code>"
                )

        # Gas station balance
        user_info.append("\n‚õΩ <b>–ì–∞–∑–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç:</b>")
        user_info.append(f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {seller.gas_deposit_balance:.2f} TRX")

        response_text = "\n".join(user_info)

        await message.answer(
            response_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(is_registered=True),
        )

    except Exception as e:
        logger.exception(f"Error in handle_myaccount for user {telegram_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.",
            reply_markup=get_main_menu_keyboard(is_registered=True),
        )


async def handle_register(message: types.Message, state: FSMContext = None):
    # Only handle /register command here
    logger.info(f"User {message.from_user.id} called /register")

    if message.text and message.text.strip() != "/register":
        return
    telegram_id = message.from_user.id
    db = message.bot.db
    seller = get_seller(db=db, telegram_id=telegram_id)

    # If seller does not exist, create and prompt for xPub
    if not seller:
        create_seller(db=db, telegram_id=telegram_id)
        await message.answer(
            "–í—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à xPub (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é).",
            reply_markup=get_main_menu_keyboard(is_registered=False),
        )
        if state is not None:
            await state.set_state(RegisterFSM.get_xpub)
        return

    # Check if seller has any xPub submitted (wallets or buyer groups with xPub)
    wallets = get_wallets_by_seller(db, telegram_id)
    buyer_groups = get_buyer_groups_by_seller(db, telegram_id)
    has_xpub = any(w.xpub for w in wallets) or any(g.xpub for g in buyer_groups)

    if has_xpub:
        # User is already registered with xPub, redirect to myaccount
        await message.answer(
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myaccount –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.",
            reply_markup=get_main_menu_keyboard(is_registered=True),
        )
        return

    # No xPub found, continue with registration
    await message.answer(
        "–£ –≤–∞—Å –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∏ –æ–¥–∏–Ω xPub. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à xPub (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é).",
        reply_markup=get_main_menu_keyboard(is_registered=False),
    )
    if state is not None:
        await state.set_state(RegisterFSM.get_xpub)


# --- Registration FSM choice handlers ---
async def process_choose_account_action(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    db = message.bot.db
    choice = message.text.strip()

    wallets = get_wallets_by_seller(db, telegram_id)
    if choice == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç":
        # Show list of accounts to choose from
        kb = types.ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
        for w in wallets:
            short_xpub = f"...{w.xpub[-8:]}" if w.xpub else "(–Ω–µ—Ç xPub)"
            kb.keyboard.append(
                [
                    types.KeyboardButton(
                        text=f"xPub: {short_xpub} | Account: {w.account}"
                    )
                ]
            )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
        await state.set_state(RegisterFSM.select_existing_account)
        return
    elif choice == "Create new wallet (new seed phrase)":
        await message.answer(
            "‚ö†Ô∏è To create a new wallet, you must use a new seed phrase. Generate a new seed phrase, get the xPub, and send it here. Never use your old seed phrase for a new wallet!"
        )
        await message.answer("Please send the new xPub:")
        await state.set_state(RegisterFSM.get_xpub)
        return
    else:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return


async def process_select_existing_account(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    db = message.bot.db
    account_info = message.text.strip()
    # Parse xPub and account
    try:
        parts = account_info.replace("xPub:", "").replace("Account:", "").split("|")
        xpub = parts[0].strip()
        account = int(parts[1].strip())
    except Exception:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç {account} –¥–ª—è xPub {xpub}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç."
    )
    await show_main_menu(message, state)
    await state.clear()
    return


async def show_main_menu(message: types.Message, state: FSMContext = None):
    """
    Show the main actions keyboard to the user.
    """
    telegram_id = message.from_user.id
    db = message.bot.db

    # Check if user is registered
    try:
        seller = get_seller(db=db, telegram_id=telegram_id)
        # Check if user has any xPub configured
        wallets = get_wallets_by_seller(db, telegram_id)
        buyer_groups = get_buyer_groups_by_seller(db, telegram_id)
        has_xpub = any(w.xpub for w in wallets) or any(g.xpub for g in buyer_groups)
        is_registered = seller is not None and has_xpub
    except Exception:
        is_registered = False

    keyboard = get_main_menu_keyboard(is_registered=is_registered)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
    # seller = get_seller(db=db, telegram_id=telegram_id)
    # if not seller:
    #     create_seller(db=db, telegram_id=telegram_id)
    #     msg = "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞:"
    # else:
    #     msg = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞:"
    # import os

    # base_url = os.getenv("SETUP_URL_BASE", "https://127.0.0.1:8000")
    # url = f"{base_url}/setup.html?token={token}"
    # logger.info(f"User {telegram_id} setup link: {url}")
    # await message.answer(f"{msg} {url}")


async def handle_deposit(message: types.Message):
    telegram_id = message.from_user.id
    logger.info(f"User {telegram_id} called /deposit")
    db = message.bot.db
    seller = get_seller(db=db, telegram_id=telegram_id)

    deposit_address = get_or_create_tron_deposit_address(db, seller_id=telegram_id)
    trx_needed = calculate_trx_needed(seller)
    logger.info(
        f"User {telegram_id} deposit address: {deposit_address}, TRX needed: {trx_needed}"
    )

    qr = qrcode.QRCode(box_size=6, border=2)
    qr.add_data(deposit_address)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    buf = BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)

    await message.answer(
        f"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π TRON-–∞–¥—Ä–µ—Å –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ –≥–∞–∑–∞:\n<code>{deposit_address}</code>\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞: <b>{trx_needed} TRX</b>",
        parse_mode="HTML",
    )
    await message.answer_photo(
        BufferedInputFile(buf.getvalue(), "deposit_qr.png"),
        caption="QR-–∫–æ–¥ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ TRX",
    )


async def handle_balance(message: types.Message):
    telegram_id = message.from_user.id
    logger.info(f"User {telegram_id} called /balance")
    db = message.bot.db
    seller = get_seller(db=db, telegram_id=telegram_id)

    # Default credited balance from DB
    credited_trx = float(seller.gas_deposit_balance or 0)

    # Resolve deposit address and on-chain pending balance
    pending_trx = 0.0
    try:
        from src.core.config import config
        # Ensure a deposit address exists
        deposit_address = get_or_create_tron_deposit_address(db, seller_id=telegram_id)
        # Query TRX balance on-chain via GasStationService's client
        gs = GasStationService(config.tron)
        acc_info = gs.tron.get_account(deposit_address)
        sun = int((acc_info or {}).get('balance', 0) or 0)
        pending_trx = sun / 1_000_000
    except Exception as e:
        logger.warning(f"Could not fetch on-chain TRX balance for {telegram_id}: {e}")
        deposit_address = deposit_address if 'deposit_address' in locals() else 'N/A'

    logger.info(
        f"User {telegram_id} balance: credited={credited_trx} TRX, pending_onchain={pending_trx} TRX"
    )

    # Build user-friendly response
    text = (
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{credited_trx:.6f} TRX</b>\n"
        f"–û–∂–∏–¥–∞–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –∞–¥—Ä–µ—Å –¥–µ–ø–æ–∑–∏—Ç–∞: <b>{pending_trx:.6f} TRX</b>\n\n"
        f"–ê–¥—Ä–µ—Å –¥–µ–ø–æ–∑–∏—Ç–∞ TRX: <code>{deposit_address}</code>\n"
        f"–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –≥–æ—Ä—è—á–∏–π –∫–æ—à–µ–ª–µ–∫ –∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã."
    )
    await message.answer(text, parse_mode="HTML")


async def handle_create_invoice(message: types.Message, state: FSMContext):
    """Handle the /create_invoice command and start the invoice creation FSM."""

    telegram_id = message.from_user.id
    logger.info(f"User {telegram_id} called /create_invoice")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–æ–π—Å–∞:")
    await state.set_state(InvoiceFSM.amount)


async def process_invoice_amount(message: types.Message, state: FSMContext):
    """Process the invoice amount input from the user."""

    telegram_id = message.from_user.id
    logger.info(f"User {telegram_id} entered invoice amount: {message.text}")
    await state.update_data(amount=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞:")
    await state.set_state(InvoiceFSM.description)


async def process_invoice_description(message: types.Message, state: FSMContext):
    """Process the invoice description input from the user."""
    print("Processing invoice description...")

    telegram_id = message.from_user.id
    logger.info(f"User {telegram_id} entered invoice description: {message.text}")
    await state.update_data(description=message.text)
    db = message.bot.db
    groups = get_buyer_groups_by_seller(db, telegram_id)
    if not groups:
        logger.info(f"User {telegram_id} has no buyer groups")
        kb = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")]],
            resize_keyboard=True,
        )
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É?\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (General):",
            reply_markup=kb,
        )
        await state.update_data(description=message.text)
        await state.set_state(InvoiceFSM.awaiting_group_name_for_invoice)
        return
    kb = types.ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
    for g in groups:
        kb.keyboard.append(
            [types.KeyboardButton(text=f"{g.buyer_id} | {g.invoices_group}")]
        )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è/–≥—Ä—É–ø–ø—É:", reply_markup=kb)
    await state.set_state(InvoiceFSM.group)


# --- Handler for group name after no groups found ---
async def process_group_name_for_invoice(message: types.Message, state: FSMContext):
    """
    Process the group name input when no buyer groups are found."""
    print("Processing group name for invoice creation...")

    telegram_id = message.from_user.id
    db = message.bot.db
    group_name = message.text.strip()
    normalized = group_name.lower().strip()
    if (
        normalized == "–Ω–µ—Ç"
        or normalized == "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        or not normalized
        or normalized == "general"
    ):
        group_name = "General"
    logger.info(f"User {telegram_id} creating default buyer group: {group_name}")
    # Create the group for this seller
    create_buyer_group(db, seller_id=telegram_id, buyer_id=group_name, invoices_group=0)
    # Continue invoice creation as if group now exists
    groups = get_buyer_groups_by_seller(db, telegram_id)
    kb = types.ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
    for g in groups:
        kb.keyboard.append(
            [types.KeyboardButton(text=f"{g.buyer_id} | {g.invoices_group}")]
        )
    await message.answer(
        f"–ì—Ä—É–ø–ø–∞ '{group_name}' —Å–æ–∑–¥–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:", reply_markup=kb
    )
    await state.set_state(InvoiceFSM.group)


async def process_invoice_group(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    logger.info(f"User {telegram_id} selected invoice group: {message.text}")
    data = await state.get_data()
    group_str = message.text.strip()
    try:
        buyer_id, invoices_group = group_str.split("|")
        buyer_id = buyer_id.strip()
        invoices_group = int(invoices_group.strip())
    except Exception:
        logger.warning(
            f"User {telegram_id} provided invalid group format: {message.text}"
        )
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    db = message.bot.db

    # Use buyer group's xpub and account index for address derivation
    buyer_group = get_buyer_group(db, telegram_id, buyer_id)
    if not buyer_group or not getattr(buyer_group, "xpub", None):
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω xPub –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É —Å xPub."
        )
        await state.clear()
        return

    existing_invoices = get_invoices_by_seller(db, telegram_id)
    # Only consider used addresses for this xpub and this account index (buyer group)
    used_addresses = set(
        inv.address
        for inv in existing_invoices
        if inv.derivation_index is not None
        and getattr(inv, "buyer_group_id", None) == buyer_group.id
    )
    # Find the first unused address index for this account (buyer group)
    next_address_index = 0
    while True:
        candidate_address = generate_address_from_xpub(
            buyer_group.xpub, account=invoices_group, address_index=next_address_index
        )
        if candidate_address not in used_addresses:
            derived_address = candidate_address
            break
        next_address_index += 1
    # Log full derivation path
    derivation_path = f"m/44'/195'/{invoices_group}'/0/{next_address_index}"
    invoice = create_invoice(
        db=db,
        seller_id=telegram_id,
        buyer_group_id=buyer_group.id,
        derivation_index=next_address_index,
        address=derived_address,
        amount=float(data["amount"]),
        status="pending",
    )
    logger.info(
        f"User {telegram_id} created invoice: address={invoice.address}, amount={data['amount']}, group={buyer_id}, derivation_index={next_address_index}, derivation_path={derivation_path}"
    )
    # Generate QR code for invoice address
    qr = qrcode.QRCode(box_size=6, border=2)
    qr.add_data(invoice.address)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    buf = BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)
    await message.answer(
        f"–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω!\n–ê–¥—Ä–µ—Å: <code>{invoice.address}</code>\n"
        f"–°—É–º–º–∞: <b>{data['amount']}</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"–ì—Ä—É–ø–ø–∞: {buyer_id}\n\n–ü—É—Ç—å –¥–µ—Ä–∏–≤–∞—Ü–∏–∏: <code>{derivation_path}</code>",
        parse_mode="HTML",
    )
    await message.answer_photo(
        BufferedInputFile(buf.getvalue(), "invoice_qr.png"),
        caption=f"QR-–∫–æ–¥ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞: {invoice.address}",
    )
    await show_main_menu(message, state)
    await state.clear()


# --- –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏/–≥—Ä—É–ø–ø—ã ---
async def handle_buyers(message: types.Message):
    telegram_id = message.from_user.id
    logger.info(f"User {telegram_id} called /buyers")
    db = message.bot.db

    groups = get_buyer_groups_by_seller(db, telegram_id)
    if not groups:
        logger.info(f"User {telegram_id} has no buyer groups")
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /add_buyer.")
        return
    # Sort groups by account number (invoices_group)
    groups_sorted = sorted(groups, key=lambda g: g.invoices_group)
    text = "Registered Buyers:\n"
    db = message.bot.db
    for g in groups_sorted:
        # Count invoices for this buyer group
        invoices = get_invoices_by_seller(db, telegram_id)
        count = sum(
            1
            for inv in invoices
            if getattr(inv, "buyer_group_id", None) == getattr(g, "id", None)
        )
        text += f"- {g.buyer_id} | Account: {g.invoices_group} | {count} invoice(s)\n"
    logger.info(f"User {telegram_id} buyer groups listed")
    await message.answer(text)


async def handle_add_buyer(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    logger.info(f"User {telegram_id} called /add_buyer")
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ buyer_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, email –∏–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è):"
    )
    await state.set_state(AddBuyerFSM.buyer_id)


async def process_add_buyer_id(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    logger.info(f"User {telegram_id} entered buyer_id: {message.text.strip()}")
    db = message.bot.db
    buyers = get_buyer_groups_by_seller(db, telegram_id)
    used_accounts = set(b.invoices_group for b in buyers)
    next_account = 0
    while next_account in used_accounts:
        next_account += 1
    await state.update_data(buyer_id=message.text.strip())
    await message.answer(
        f"–î–ª—è —ç—Ç–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ account #{next_account} –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ xPub —Å –≤–∞—à–∏–º seed phrase.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ xPub –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:"
    )
    await state.set_state(AddBuyerFSM.xpub)


async def process_add_buyer_group(message: types.Message, state: FSMContext):
    # No longer needed, merged with xpub step
    pass


# New FSM state handler for buyer xPUB
async def process_add_buyer_xpub(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    data = await state.get_data()
    buyer_id = data.get("buyer_id")
    xpub = message.text.strip()
    db = message.bot.db
    # Find next available account index for this seller
    buyers = get_buyer_groups_by_seller(db, telegram_id)
    used_accounts = set(b.invoices_group for b in buyers)
    next_account = 0
    while next_account in used_accounts:
        next_account += 1
    create_buyer_group(
        db,
        seller_id=telegram_id,
        buyer_id=buyer_id,
        invoices_group=next_account,
        xpub=xpub,
    )
    logger.info(
        f"User {telegram_id} added buyer: {buyer_id} | account: {next_account} | xpub: {xpub}"
    )
    await message.answer(
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {buyer_id} —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {next_account} –∏ xPub –¥–æ–±–∞–≤–ª–µ–Ω."
    )
    await show_main_menu(message, state)
    await state.clear()


async def handle_sweep(message: types.Message):
    telegram_id = message.from_user.id
    logger.info(f"User {telegram_id} called /sweep")
    paid_invoices = [
        inv
        for inv in get_invoices_by_seller(db=message.bot.db, seller_id=telegram_id)
        if inv.status == "paid"
    ]
    total = sum(inv.amount for inv in paid_invoices)
    count = len(paid_invoices)
    logger.info(f"User {telegram_id} sweep: {count} invoices, total {total} TRX")
    if not paid_invoices:
        await message.answer("–ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        return
    await message.answer(
        f"–ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} –∏–Ω–≤–æ–π—Å–æ–≤ –Ω–∞ —Å—É–º–º—É {total} TRX. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç)"
    )
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å FSM –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
    for inv in paid_invoices:
        logger.info(
            f"User {telegram_id} sweeping invoice {inv.id} address {inv.address}"
        )
        prepare_for_sweep(inv.address)
        update_invoice(db=message.bot.db, invoice_id=inv.id, status="swept")
    await message.answer("–í—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –≤—ã–≤–µ–¥–µ–Ω—ã.")


async def process_register_xpub(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    text = message.text.strip()
    logger.info(f"User {telegram_id} process_register_xpub: {text}")
    if text.lower() == "–Ω–µ—Ç":
        await message.answer(
            "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ xPub –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—É (xpub_offline.html) –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ xPub –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å seed-—Ñ—Ä–∞–∑–æ–π –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º!"
        )
        await state.clear()
        return
    # Only validate xPub if the user is registering a new wallet, not when choosing an existing account
    # If FSM state is RegisterFSM.get_xpub, validate xPub
    current_state = await state.get_state()
    if current_state == RegisterFSM.get_xpub.state:
        xpub = text
        if not is_valid_xpub(xpub):
            logger.warning(f"User {telegram_id} provided invalid xPub: {xpub}")
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π xPub. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π xPub."
            )
            return
    db = message.bot.db
    buyers = get_buyer_groups_by_seller(db, telegram_id)
    if not buyers:
        # First xPub, assign to default buyer 'General' with account 0
        create_buyer_group(
            db,
            seller_id=telegram_id,
            buyer_id="General",
            invoices_group=0,
            xpub=xpub,
        )
        logger.info(
            f"User {telegram_id} registered first xPub for default buyer 'General'"
        )
        await message.answer(
            "–í–∞—à xPub —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è 'General' (–∞–∫–∫–∞—É–Ω—Ç 0)."
        )
        await show_main_menu(message, state)
        await state.clear()
        return
    # If buyers exist, ask user for buyer name or use next available account, with buttons
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="General")],
            [types.KeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è")],
        ],
        resize_keyboard=True,
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ xPub:", reply_markup=kb)
    await state.update_data(xpub=xpub)
    await state.set_state("register_buyer_name")


async def process_register_account(message: types.Message, state: FSMContext):
    # This registration logic is now handled in process_register_xpub
    pass
    register_buyer_name = State()


# --- Handler for /invoices command: show all invoices with details ---
async def handle_invoices(message: types.Message):
    telegram_id = message.from_user.id
    logger.info(f"User {telegram_id} called /invoices")
    db = message.bot.db
    invoices = get_invoices_by_seller(db, telegram_id)
    if not invoices:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–Ω–≤–æ–π—Å–æ–≤.")
        return
    text = "–í–∞—à–∏ –∏–Ω–≤–æ–π—Å—ã:\n"
    for inv in invoices:
        # Use buyer_group_id to lookup correct buyer group and account index
        buyer_group_id = getattr(inv, "buyer_group_id", None)
        buyer_group = None
        if buyer_group_id is not None:
            # get_buyer_groups_by_seller returns all groups, find by id
            all_groups = get_buyer_groups_by_seller(db, telegram_id)
            for g in all_groups:
                if getattr(g, "id", None) == buyer_group_id:
                    buyer_group = g
                    break
        account_index = (
            getattr(buyer_group, "invoices_group", "-") if buyer_group else "-"
        )
        buyer_id = getattr(buyer_group, "buyer_id", "-") if buyer_group else "-"
        address_index = getattr(inv, "derivation_index", "-")
        derivation_path = (
            f"m/44'/195'/{account_index}'/0/{address_index}"
            if account_index != "-" and address_index != "-"
            else "-"
        )
        # Calculate received/remaining via stored transactions
        try:
            txs = get_transactions_by_invoice(db, inv.id)
            total_received = sum(float(t.amount_received or 0) for t in txs)
        except Exception:
            total_received = 0.0
        remaining = max(0.0, float(inv.amount) - total_received)
        received_line = (
            f"–ü–æ–ª—É—á–µ–Ω–æ: {total_received:.6f} USDT\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining:.6f} USDT\n"
            if total_received > 0 else ""
        )
        text += (
            f"\nID: {inv.id}\n"
            f"–°—Ç–∞—Ç—É—Å: {inv.status}\n"
            f"–°—É–º–º–∞: {inv.amount}\n"
            f"{received_line}"
            f"–ê–¥—Ä–µ—Å: {inv.address}\n"
            f"–ì—Ä—É–ø–ø–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {buyer_id}\n"
            f"–ò–Ω–¥–µ–∫—Å –¥–µ—Ä–∏–≤–∞—Ü–∏–∏: {address_index}\n"
            f"–ü—É—Ç—å –¥–µ—Ä–∏–≤–∞—Ü–∏–∏: {derivation_path}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {getattr(inv, 'description', '-') }\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {getattr(inv, 'created_at', '-') }\n"
            "----------------------"
        )
    await message.answer(text)


# # --- Admin command: /admin_xpubs <seller_id> ---
# async def handle_admin_xpubs(message: types.Message):
#     telegram_id = message.from_user.id
#     if not is_admin(telegram_id):
#         await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
#         return
#     args = message.text.strip().split()
#     if len(args) != 2:
#         await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_xpubs <seller_id>")
#         return
#     try:
#         seller_id = int(args[1])
#     except Exception:
#         await message.answer("seller_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
#         return
#     db = message.bot.db
#     from src.core.database.db_service import SessionLocal

#     wallets = (
#         db.query(create_seller_wallet.__globals__["Wallet"])
#         .filter_by(seller_id=seller_id)
#         .all()
#     )
#     if not wallets:
#         await message.answer(f"–ù–µ—Ç xPub-–∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è seller_id {seller_id}.")
#         return
#     text = f"xPubs –¥–ª—è seller_id {seller_id}:\n"
#     for w in wallets:
#         text += f"- group: {w.invoices_group}, xpub: {w.xpub}\n"
#     await message.answer(text)


# --- Help command handler ---
async def handle_help(message: types.Message):
    help_text = (
        "<b>Help & Definitions</b>\n\n"
        "<b>Wallet:</b> In this platform, a wallet is defined by an xPub (extended public key) generated from a UNIQUE seed phrase (mnemonic). Each wallet can have multiple accounts.\n\n"
        "<b>xPub:</b> The extended public key is generated from your seed phrase and allows you to derive addresses for all accounts and invoices without exposing your private keys.\n\n"
        "<b>Seed Phrase:</b> A sequence of words used to generate your wallet and all its accounts. Never share your seed phrase.\n\n"
        "<b>Account:</b> An account is a logical sub-wallet within your xPub. Each buyer is assigned a unique account number.\n"
        "The account number is used to separate funds and addresses for different buyers.\n\n"
        "<b>Address Index:</b> Within each account, addresses are generated using an incrementing address index. Each invoice gets a unique address by increasing this index.\n\n"
        "<b>Buyer:</b> Represents a customer or group. Each buyer is linked to a specific account in your wallet.\n\n"
        "<b>Invoice:</b> A payment request generated for a buyer. Each invoice uses a unique address derived from your wallet's xPub, account, and address index.\n\n"
        "<b>Difference between Wallet, Account, and Address Index:</b>\n"
        "- <b>Wallet</b> is the whole structure generated from your seed phrase (mnemonic).\n"
        "- <b>xPub</b> is the extended public key for your wallet, used to derive all addresses.\n"
        "- <b>Account</b> is a logical partition inside your wallet, used for buyers.\n"
        "- <b>Address Index</b> is the number of the address within an account, incremented for each invoice.\n"
        "- <b>Derivation Path:</b> m/44'/195'/account'/0/address_index\n\n"
        "<b>Key commands:</b>\n"
        "/register - Register or manage your wallets (xPub)\n"
        "/buyers - List your buyers and their accounts\n"
        "/add_buyer - Add a new buyer (creates a new account in your wallet)\n"
        "/create_invoice - Create a new invoice for a buyer\n"
        "/invoices - List all invoices\n"
        "/deposit - Get your TRON deposit address for gas\n"
        "/balance - Show your TRON gas balance\n"
        "/sweep - Sweep paid invoices\n"
        "/help - Show this help message\n\n"
        "<b>Important:</b> To create a new wallet, you must use a new seed phrase and generate a new xPub. Never reuse a seed phrase for multiple wallets.\n"
        "Each account is unique for each buyer. Addresses are derived as: m/44'/195'/account'/0/address_index."
    )
    await message.answer(help_text, parse_mode="HTML")


def register_registration_fsm_handlers(dp, seller_handlers):
    dp.message.register(
        seller_handlers.process_choose_account_action,
        seller_handlers.RegisterFSM.choose_account_action,
    )
    dp.message.register(
        seller_handlers.process_select_existing_account,
        seller_handlers.RegisterFSM.select_existing_account,
    )
    dp.message.register(
        seller_handlers.process_register_xpub, seller_handlers.RegisterFSM.get_xpub
    )
    dp.message.register(
        seller_handlers.process_register_account,
        seller_handlers.RegisterFSM.get_account,
    )
    dp.message.register(
        seller_handlers.process_add_buyer_xpub,
        "add_buyer_xpub",
    )


def register_help_handler(dp, seller_handlers):
    dp.message.register(seller_handlers.handle_help, commands=["help"])


# Gas Station and Keeper Bot handlers
async def handle_gasstation(message: types.Message):
    """Handle gas station status and management"""
    try:
        # Use the same configuration as other services
        from src.core.config import config
        
        # Send initial message to show it's processing
        processing_msg = await message.answer("‚è≥ Getting gas station status...")
        
        gas_station = GasStationService(config.tron)

        # Get gas station status with timeout handling
        import asyncio
        try:
            # Run with a timeout to prevent hanging
            status = await asyncio.wait_for(
                asyncio.to_thread(gas_station.get_status), 
                timeout=30.0
            )
        except asyncio.TimeoutError:
            await processing_msg.delete()
            await message.answer("‚ùå Gas station request timed out. TRON network connection might be slow. Please try again.")
            return

        # Format the response
        response = "‚õΩ **Gas Station Status**\n\n"
        response += f"üè¶ **Address:** `{status['address']}`\n"
        response += f"üí∞ **TRX Balance:** {status['balance']:.2f} TRX\n\n"

        response += "üìä **Staked Resources:**\n"
        if status["resources"]["energy"]["staked"] > 0:
            response += f"‚ö° **Energy:** {status['resources']['energy']['staked']:,.0f} TRX\n"
            response += (
                f"   Available: {status['resources']['energy']['available']:,} units\n"
            )

        if status["resources"]["bandwidth"]["staked"] > 0:
            response += f"üì° **Bandwidth:** {status['resources']['bandwidth']['staked']:,.0f} TRX\n"
            response += f"   Available: {status['resources']['bandwidth']['available']:,} units\n"

        response += f"\nüîó **Network:** {status['network']}\n"
        response += f"‚úÖ **Status:** {'Online' if status.get('operational', {}).get('can_process_100_tx', False) else 'Offline'}\n"

        # Add efficiency analysis
        try:
            # Use the efficiency data already calculated in the status
            energy_eff = status.get("efficiency", {}).get("energy", 0)
            bandwidth_eff = status.get("efficiency", {}).get("bandwidth", 0)
            avg_efficiency = (energy_eff + bandwidth_eff) / 2 if energy_eff or bandwidth_eff else 0
            response += f"\nüìà **Efficiency:** {avg_efficiency:.1f}%\n"
        except Exception:
            response += f"\nüìà **Efficiency:** Not available\n"

        # Add management buttons
        response += "\nüîß **Management Commands:**\n"
        response += "‚Ä¢ `/gasstation_stake` - Manage staking\n"
        response += "‚Ä¢ `/gasstation_delegate` - Manage delegation\n"
        response += "‚Ä¢ `/gasstation_withdraw` - Withdraw resources\n"

        # Delete processing message and send result
        await processing_msg.delete()
        await message.answer(response, parse_mode="Markdown")

    except ValueError as ve:
        logger.error(f"Configuration error in gas station handler: {ve}")
        if 'processing_msg' in locals():
            await processing_msg.delete()
        await message.answer("‚ùå Gas station configuration error. Please check if the gas wallet private key is set correctly.")
    except Exception as e:
        logger.error(f"Error in gas station handler: {e}")
        if 'processing_msg' in locals():
            await processing_msg.delete()
        await message.answer(
            "‚ùå Error retrieving gas station status. The service might be connecting to TRON network. Please try again in a moment."
        )


async def handle_keeper_status(message: types.Message):
    """Handle keeper bot status monitoring"""
    try:
        # Check if keeper bot process is running by checking log activity
        import subprocess
        import os

        keeper_running = False

        # Try to check if process is running via ps command (Linux/Unix)
        try:
            result = subprocess.run(
                ["pgrep", "-f", "keeper_bot.py"],
                capture_output=True,
                text=True,
                timeout=5,
            )
            keeper_running = bool(result.stdout.strip())
        except (subprocess.TimeoutExpired, FileNotFoundError):
            # Fallback: check recent log activity
            try:
                import time

                with open("bot.log", "r", encoding="utf-8") as f:
                    lines = f.readlines()
                    keeper_logs = [line for line in lines[-20:] if "keeper_bot" in line]
                    if keeper_logs:
                        # Check if last log is recent (within last 5 minutes)
                        last_log = keeper_logs[-1]
                        # This is a simple heuristic - if we see recent logs, assume it's running
                        keeper_running = True
            except Exception:
                pass

        response = "ü§ñ **Keeper Bot Status**\n\n"

        if keeper_running:
            response += "‚úÖ **Status:** Running\n"

            # Try to get recent log entries
            try:
                with open("bot.log", "r", encoding="utf-8") as f:
                    lines = f.readlines()
                    keeper_logs = [line for line in lines[-50:] if "keeper_bot" in line]
                    if keeper_logs:
                        last_log = keeper_logs[-1].strip()
                        # Extract timestamp and message
                        if "Checking pending invoices" in last_log:
                            response += "üîç **Last Activity:** Checking invoices\n"
                        elif "Invoice" in last_log and "paid" in last_log:
                            response += (
                                "üí∞ **Last Activity:** Invoice payment detected\n"
                            )
                        elif "connected to local TRON node" in last_log:
                            response += (
                                "üîó **Last Activity:** Connected to local node\n"
                            )
                        elif "connected to remote TRON" in last_log:
                            response += (
                                "üåê **Last Activity:** Connected to remote API\n"
                            )
                        else:
                            response += "üìù **Last Activity:** Processing...\n"
            except Exception:
                pass

        else:
            response += "‚ùå **Status:** Not Running\n"
            response += "‚ÑπÔ∏è The keeper bot monitors pending invoices and handles automatic account activation.\n"

        response += "\nüìä **Functions:**\n"
        response += "‚Ä¢ Monitor pending invoice payments\n"
        response += "‚Ä¢ Auto-activate TRON accounts\n"
        response += "‚Ä¢ Handle USDT transfer detection\n"
        response += "‚Ä¢ Manage payment notifications\n"
        response += "‚Ä¢ Local TRON node support with fallback\n"

        if keeper_running:
            response += "\nüîß **Management:**\n"
            response += "‚Ä¢ `/keeper_logs` - View recent logs\n"

        await message.answer(response, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in keeper status handler: {e}")
        await message.answer(
            "‚ùå Error retrieving keeper bot status. Please try again later."
        )


async def handle_keeper_logs(message: types.Message):
    """Show recent keeper bot logs"""
    try:
        with open("bot.log", "r", encoding="utf-8") as f:
            lines = f.readlines()
            keeper_logs = [line for line in lines[-100:] if "keeper_bot" in line]

        if not keeper_logs:
            await message.answer("üìù No recent keeper bot logs found.")
            return

        # Get last 10 log entries
        recent_logs = keeper_logs[-10:]

        response = "üìã **Recent Keeper Bot Logs:**\n\n"
        for log in recent_logs:
            # Clean up the log line for display
            clean_log = log.strip()
            if len(clean_log) > 100:
                clean_log = clean_log[:97] + "..."
            response += f"`{clean_log}`\n"

        response += f"\nüìä **Total entries:** {len(keeper_logs)}"

        await message.answer(response, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error reading keeper logs: {e}")
        await message.answer("‚ùå Error reading keeper bot logs.")


async def handle_gasstation_stake(message: types.Message):
    """Handle gas station staking management"""
    # TODO: Implement staking management interface
    await message.answer("üöß Gas station staking management coming soon!")


async def handle_gasstation_delegate(message: types.Message):
    """Handle gas station delegation management"""
    # TODO: Implement delegation management interface
    await message.answer("üöß Gas station delegation management coming soon!")


async def handle_gasstation_withdraw(message: types.Message):
    """Handle gas station withdrawal management"""
    # TODO: Implement withdrawal management interface
    await message.answer("üöß Gas station withdrawal management coming soon!")


# Handler to cancel FSM state if main command is sent during an active FSM flow
